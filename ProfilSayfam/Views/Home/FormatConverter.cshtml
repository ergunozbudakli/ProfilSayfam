@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = @Localizer["FormatConverter"].Value;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        .format-converter-wrapper {
            background: rgba(19, 19, 19, 0.95);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .format-converter-title {
            color: #fff;
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .format-converter-description {
            color: #9e9e9e;
            font-size: 1rem;
            text-align: center;
            margin-bottom: 2rem;
        }

        .converter-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .converter-button {
            background: #E31C25;
            color: #fff;
            border: none;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .converter-button:hover {
            background: #ff1f2a;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(227, 28, 37, 0.3);
        }

        .converter-button i {
            font-size: 1.2rem;
        }

        /* Modal Styles */
        .modal-content {
            background: rgba(19, 19, 19, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
        }

        .modal-title {
            color: #fff;
            font-size: 1.5rem;
            font-weight: 500;
        }

        .modal-header .btn-close {
            color: #fff;
            opacity: 0.8;
            text-shadow: none;
            background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
        }

        .modal-body {
            padding: 2rem;
        }

        .file-upload-area {
            border: 2px dashed rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-upload-area:hover {
            border-color: #E31C25;
            background: rgba(227, 28, 37, 0.1);
        }

        .file-upload-area i {
            font-size: 3rem;
            color: #E31C25;
            margin-bottom: 1rem;
        }

        .file-upload-text {
            color: #9e9e9e;
            font-size: 1rem;
            margin: 1rem 0;
        }

        .modal-footer {
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
        }

        .btn-convert {
            background: #E31C25;
            color: #fff;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 6px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-convert:hover {
            background: #ff1f2a;
            transform: translateY(-2px);
        }

        .btn-close-modal {
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 6px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-close-modal:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        /* Yükleme Animasyonu Stilleri */
        .loading-spinner {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(19, 19, 19, 0.9);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            border-radius: 8px;
        }

        .loading-spinner.show {
            display: flex;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #E31C25;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            color: #fff;
            margin-top: 1rem;
            font-size: 1rem;
        }

        /* Animasyon stilleri */
        .animate-on-load {
            opacity: 0;
            transform: translateY(30px);
            transition: all 0.8s ease-out;
        }

        .animate-on-load.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* Animasyon gecikmeleri */
        .delay-1 { transition-delay: 0.2s; }
        .delay-2 { transition-delay: 0.4s; }
        .delay-3 { transition-delay: 0.6s; }
        .delay-4 { transition-delay: 0.8s; }
    </style>
}

<section style="background: #000; min-height: 100vh; padding-top: 6rem;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12">
                <div class="format-converter-wrapper animate-on-load delay-1">
                    <h2 class="format-converter-title animate-on-load delay-2">@Localizer["FormatConverter"]</h2>
                    <p class="format-converter-description animate-on-load delay-3">@Localizer["FormatConverterDescription"]</p>
                    
                    <div class="converter-buttons animate-on-load delay-4">
                        <button class="converter-button" onclick="openPdfToWordModal()">
                            <i class="bi bi-file-earmark-pdf"></i>
                            @Localizer["PdfToWord"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- PDF to Word Modal -->
<div class="modal fade" id="pdfToWordModal" tabindex="-1" aria-labelledby="pdfToWordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pdfToWordModalLabel">@Localizer["PdfToWord"]</h5>
                <button type="button" class="btn-close" onclick="closeModal()" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="file-upload-area" onclick="triggerFileInput()" ondrop="handleDrop(event)" ondragover="handleDragOver(event)">
                    <i class="bi bi-cloud-upload"></i>
                    <input type="file" id="pdfFileInput" accept=".pdf" style="display: none;" onchange="handleFileSelect(event)">
                    <div class="file-upload-text">@Localizer["DragDropText"]</div>
                    <div class="loading-spinner">
                        <div class="d-flex flex-column align-items-center">
                            <div class="spinner"></div>
                            <div class="loading-text">@Localizer["Converting"]...</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-close-modal" onclick="closeModal()">@Localizer["Close"]</button>
                <button type="button" class="btn-convert" onclick="convertPdfToWord()">@Localizer["Convert"]</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let pdfToWordModal;
        let isConverting = false;
        let currentSwal = null;

        document.addEventListener('DOMContentLoaded', function() {
            pdfToWordModal = new bootstrap.Modal(document.getElementById('pdfToWordModal'));

            // SweetAlert2 varsayılan ayarlarını güncelle
            Swal.mixin({
                confirmButtonText: '@Localizer["Ok"]',
                cancelButtonText: '@Localizer["Cancel"]',
                confirmButtonColor: '#E31C25'
            });

            // Tüm animate-on-load elementlerini seç
            const elements = document.querySelectorAll('.animate-on-load');
            
            // Her elemente show class'ını ekle
            elements.forEach(element => {
                element.classList.add('show');
            });
        });

        function showAlert(config) {
            if (currentSwal) {
                currentSwal.close();
            }
            currentSwal = Swal.fire(config);
            return currentSwal;
        }

        function closeModal() {
            if (!isConverting) {
                pdfToWordModal.hide();
                setTimeout(() => {
                    resetModal();
                }, 150);
            }
        }

        function openPdfToWordModal() {
            pdfToWordModal.show();
            resetModal();
        }

        function resetModal() {
            document.getElementById('pdfFileInput').value = '';
            document.querySelector('.file-upload-text').textContent = '@Localizer["DragDropText"]';
            document.querySelector('.loading-spinner').classList.remove('show');
            isConverting = false;
            document.querySelector('.file-upload-area').classList.remove('dragover');
        }

        function showLoadingSpinner() {
            document.querySelector('.loading-spinner').classList.add('show');
            isConverting = true;
        }

        function hideLoadingSpinner() {
            document.querySelector('.loading-spinner').classList.remove('show');
            isConverting = false;
        }

        async function convertPdfToWord() {
            const fileInput = document.getElementById('pdfFileInput');
            if (!fileInput.files || fileInput.files.length === 0) {
                showAlert({
                    icon: 'warning',
                    title: '@Localizer["Warning"]',
                    text: '@Localizer["PleaseSelectFile"]'
                });
                return;
            }

            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append('file', file);

            try {
                showLoadingSpinner();
                
                const response = await fetch('/Home/ConvertPdfToWord', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText);
                }

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = file.name.replace('.pdf', '.docx');
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                // Modal'ı kapat ve temizle
                pdfToWordModal.hide();
                resetModal();

                // Başarı mesajını göster
                await showAlert({
                    icon: 'success',
                    title: '@Localizer["Success"]',
                    text: '@Localizer["ConversionComplete"]'
                });
            } catch (error) {
                await showAlert({
                    icon: 'error',
                    title: '@Localizer["Error"]',
                    text: error.message || '@Localizer["ConversionError"]'
                });
            } finally {
                hideLoadingSpinner();
            }
        }

        function triggerFileInput() {
            if (!isConverting) {
                document.getElementById('pdfFileInput').click();
            }
        }

        function handleDragOver(event) {
            if (!isConverting) {
                event.preventDefault();
                event.stopPropagation();
                event.currentTarget.classList.add('dragover');
            }
        }

        function handleDrop(event) {
            if (!isConverting) {
                event.preventDefault();
                event.stopPropagation();
                event.currentTarget.classList.remove('dragover');
                
                const files = event.dataTransfer.files;
                if (files.length > 0) {
                    const file = files[0];
                    if (file.type === 'application/pdf') {
                        document.getElementById('pdfFileInput').files = files;
                        handleFileSelect({ target: { files: files } });
                    } else {
                        showAlert({
                            icon: 'error',
                            title: '@Localizer["Error"]',
                            text: '@Localizer["OnlyPdfAllowed"]'
                        });
                    }
                }
            }
        }

        function handleFileSelect(event) {
            if (!isConverting) {
                const file = event.target.files[0];
                if (file) {
                    document.querySelector('.file-upload-text').textContent = file.name;
                }
            }
        }
    </script>
} 